---
title: 'DTSC 650: Data Analytics In R'
subtitle: 'CodeGrade Assignments Part 2: nycflights13Stats'
output: html_notebook
editor_options:
  chunk_output_type: inline
---

## Student Info

```         
Name: Estrella Arellano
Term: Fall 2 2023
Date: 11/12/2023
```

------------------------------------------------------------------------

## General Instructions

------------------------------------------------------------------------

### Name of File

Name your assignment file **`nycflights13Stats`**. This is a quarto "markdown" file, which has the file has the extension '.qmd'.

------------------------------------------------------------------------

### Allowable packages

The only allowable packages are `tidyverse`, `nycflights13`, and `lm.beta`. You should not use any other packages as CodeGrade is not set up to accept them on this assignment.

-   If the allowable packages are not installed on your local computer, you'll need to do a one-time installation *from the Console Window in RStudio* for each package like this:\
    **`install.packages('<package name>')`**\
    *Do not attempt to install packages in code that you submit to CodeGrade.*

-   Note: installing the entire tidyverse with `install.packages('tidyverse')` from the Console Window will save you from having to install any of the tidyverse's individual packages in the future.

-   In your code, load the package's library like this: **`library(<library name>)`**

------------------------------------------------------------------------

### Data Set

The data set for this assignment is called **`flights`**. See the [nycflights13 documentation](https://nycflights13.tidyverse.org/) for more info.

------------------------------------------------------------------------

### Pipe Notation

You may use the `tidyverse` pipe **`%>%`** or the new base R pipe **`|>`**. See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for a comparison.

You are expected to use pipe notation in all of the CodeGrade assignments. Although there are alternate ways to filter, subset, and summarize data sets, using the pipe creates more readable code and is an important skill to develop.

------------------------------------------------------------------------

### Rounding requirement

-   Round all float/dbl values to two decimal places.

------------------------------------------------------------------------

### Dataframe vs. Tibble

Typically, in CodeGrade assignments, we expect output to be dataframes, not tibbles, unless otherwise noted.

------------------------------------------------------------------------

### Inline vs. Console

By default, RStudio uses Inline output (Notebook mode) on R Markdown documents. You can switch between Inline and Console output modes by clicking the gear button in the editor toolbar (to the left of the green "insert new code chunk") and choosing either "Chunk Output Inline" or "Chunk Output in Console". See [here](https://bookdown.org/yihui/rmarkdown/notebook.html#creating-a-notebook) for more information.

Console output can be useful for debugging since that's how your solutions will appear to CodeGrade. You can type code directly into the Console as well and run it from there.

------------------------------------------------------------------------

### Preliminaries

```{r}
### It's always a good idea when working in RStudio to start with a clean environment. 
### Clear objects from the environment memory that may be leftoever from previous versions of your code or other assignments by running the following line:
rm(list = ls())

### Load Libraries
#install.packages('lm.beta')
library(tidyverse) 
library(nycflights13) 
library(lm.beta)

### There may be warning messages about some of the packages. You can ignore these. Feel free to search online for the explanations for these messages.
```

------------------------------------------------------------------------

## Questions

------------------------------------------------------------------------

### Q1 Address the outliers for departure delay as described in the outliers lectures. You'll want to create a new dataset without outliers for use in Q2-5. What percentage of data remains following the removal of these outliers?

-   Your answer should be a number assigned to Q1.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q1 # 

### TYPE YOUR CODE BELOW ###
dep_delay_upper <- quantile(flights$dep_delay, 0.9985, na.rm = TRUE)

dep_delay_lower <- quantile(flights$dep_delay, 0.0015, na.rm = TRUE)

dep_delay_outliers <- which(flights$dep_delay > dep_delay_upper | flights$dep_delay
                            < dep_delay_lower)
#print(dep_delay_outliers)

flights_no_outliers <- flights[-dep_delay_outliers, ]

Q1 <- (nrow(flights) - length(dep_delay_outliers)) / nrow(flights)*100 


### VIEW OUTPUT ###
Q1

```

### Q2 Using the new dataset without outliers, run cor.test for the relationship between departure delay and distance.

-   Assign the results of the `cor.test()` function call to Q2. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q2 # 

### TYPE YOUR CODE BELOW ###

Q2 <- cor.test(flights_no_outliers$dep_delay, flights_no_outliers$distance) 

### VIEW OUTPUT ###
Q2

```

### Q3 Using the new dataset without outliers, create a regression predicting departure delay from distance.

-   The summary of the model should be assigned to Q3. Do not round.

-   Note: CodeGrade will be grading you based on the last two lines of the summary output:

```         
Multiple R-squared: [value], Adjusted R-squared: [value]
F-statistic: [value] on [value] and [value] DF, p-value: < [value
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q3 # 

### TYPE YOUR CODE BELOW ###

dep_delay_reg <- lm(dep_delay ~ distance, data = flights_no_outliers)

Q3 <- summary(dep_delay_reg)

### VIEW OUTPUT ###
Q3

```

### Q4 Using the new dataset without outliers, calculate standardized regression coefficients with lm.beta for the regression from Q3.

-   Assign the results of lm.beta() to Q4. Do not round.
-   CodeGrade will be grading you on the value in the last column/row. Your output should look something like this:

```         
Call:
lm(formula = [variable] ~ [variable], data = [dataset])
Standardized Coefficients::
(Intercept) [variable]
[value] [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q4 # 

### TYPE YOUR CODE BELOW ###

Q4 <- lm.beta(dep_delay_reg)


### VIEW OUTPUT ###
Q4

```

### Q5 Using the new dataset without outliers, create another regression, this time adding carrier as a predictor to the regression from Q3.

-   The summary of the model should be assigned to Q5. Do not round.
-   Note: if you use a different method of removing outliers (see Q1) than what is used in the videos you risk upsetting CodeGrade.
-   Note: CodeGrade will be grading you based on the last two lines of the summary output:

```         
Multiple R-squared: [value], Adjusted R-squared: [value]
F-statistic: [value] on [value] and [value] DF, p-value: < [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q5 # 

### TYPE YOUR CODE BELOW ###

dep_delay_multreg <- lm(dep_delay ~ distance + carrier, data = flights_no_outliers)

Q5 <- summary(dep_delay_multreg)

### VIEW OUTPUT ###
Q5

```

------------------------------------------------------------------------

# Before submitting to Code Grade:

1)  Clear objects from your environment. Click the broom in the Environment pane in the top right. This will erase any variables (like Q1, Q2) that you've stored.

2)  Rerun all your code. You can click the "Run" option above in this script pane (top right of notebook), then select "Run all". You should have all the variables stored again in the environment pane, and you should see no red error messages in the console below.

------------------------------------------------------------------------
